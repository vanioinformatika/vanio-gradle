import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    java
    id("hu.vanio.gradle.common")
}

tasks.create("generateDocs") {
    group = "vanio-gradle"
    description =
        "Generate html from json generated by SpringDoc OpenAPI plugin"
    dependsOn("generateOpenApiDocs")
    doLast {
        val openApiExt = project.extensions.findByName("openApi") ?: throw RuntimeException("Extension 'openApi' not found. Springdoc plugin need to be applied.")
        val outputDir = openApiExt::class.members.firstOrNull {
            it.name == "outputDir"
        } ?: throw RuntimeException("Function 'outputDir' not found.")
        val outputDirString = (outputDir.call(openApiExt) as DirectoryProperty).get().toString()
        println("Generating docs to $outputDirString")
        val groupedApiMappings = openApiExt::class.members.firstOrNull {
            it.name == "groupedApiMappings"
        } ?: throw RuntimeException("Function 'groupedApiMappings' not found.")
        val outputFileName = openApiExt::class.members.firstOrNull {
            it.name == "outputFileName"
        } ?: throw RuntimeException("Function 'outputFileName' not found.")
        var docList = (groupedApiMappings.call(openApiExt) as MapProperty<String, String>).get().map { it.value }
        if (docList.isEmpty()) {
            docList = listOf((outputFileName.call(openApiExt) as Property<String>).get())
        }
        exec {
            workingDir("$buildDir")
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine("npm.cmd", "i", "-g", "redoc-cli")
            } else {
                commandLine("bash", "-lc", "npm i -g redoc-cli")
            }
        }
        docList.forEach { docnameTeljes ->
            val docname = docnameTeljes.removeSuffix(".json")
            println("doc: $docname")
            exec {
                workingDir(outputDirString)
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine("npx.cmd", "redoc-cli", "build", "$docname.json")
                } else {
                    commandLine("bash", "-lc", "npx redoc-cli build $docname.json")
                }
            }
            copy {
                from(outputDirString)
                into(outputDirString)
                include("redoc-static.html")
                rename("redoc-static.html", "$docname.html")
            }
            delete("${outputDirString}/redoc-static.html")
            println("Finished generation: $outputDirString/$docname.html")
        }
    }
}